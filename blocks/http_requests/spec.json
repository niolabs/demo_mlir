{
  "nio/HTTPRequests": {
    "version": "0.1.1",
    "description": "The HTTPRequests block sends an HTTP request for each incoming signal. If the incoming signal is a list of multiple signals, a request will be made for each item in the list. For each successful request, an outgoing signal is emitted that includes the response from the request.",
    "categories": [
      "Communication",
      "Web Data"
    ],
    "properties": {
      "basic_auth_creds": {
        "title": "Credentials (BasicAuth)",
        "type": "ObjectType",
        "description": "When making a request that needs Basic Authentication, enter the username and password.",
        "default": {
          "password": null,
          "username": null
        }
      },
      "data": {
        "title": "Parameters",
        "type": "ObjectType",
        "description": "URL parameters are key-value pairs that can appear in a URL path. Keys and values can be either simple strings or expression properties that use incoming signals.",
        "default": {
          "form_encode_data": false,
          "params": []
        }
      },
      "enrich": {
        "title": "Signal Enrichment",
        "type": "ObjectType",
        "description": "If checked (true), the attributes of the incoming signal will be excluded from the outgoing signal. If unchecked (false), the attributes of the incoming signal will be included in the outgoing signal.",
        "default": {
          "exclude_existing": true,
          "enrich_field": ""
        }
      },
      "headers": {
        "title": "Headers",
        "type": "ListType",
        "description": "Create custom header content. Headers and values can be either simple strings or expression properties that use incoming signals.",
        "default": []
      },
      "http_method": {
        "title": "HTTP Method",
        "type": "SelectType",
        "description": "HTTP request method (e.g., GET|POST|PUT|DELETE).",
        "default": "get"
      },
      "require_json": {
        "title": "Require JSON Response",
        "type": "BoolType",
        "description": "If `True` and response is not json, log a warning and do not emit a signal. If `False` and response is not json, emit a signal with the format `{'raw': response.text}`.",
        "default": false
      },
      "retry_options": {
        "title": "Retry Options",
        "type": "ObjectType",
        "description": "A selection of options to choose from when retrying to make a connection.",
        "default": {
          "max_retry": 5,
          "strategy": "linear",
          "indefinite": false,
          "multiplier": 1
        }
      },
      "timeout": {
        "title": "Request Timeout",
        "type": "IntType",
        "description": "Amount of time, in seconds, to wait for a response. If empty or 0, requests will never time out.",
        "default": 0
      },
      "url": {
        "title": "URL Target",
        "type": "Type",
        "description": "Target URL for the request.",
        "default": "http://127.0.0.1:8181"
      },
      "verify": {
        "title": "Verify Host's SSL Certificate",
        "type": "BoolType",
        "description": "A hidden property. For HTTPS, determines whether to check a host's SSL certificate. Default value for the block is `True`.",
        "default": true
      }
    },
    "inputs": {
      "default": {
        "description": "Any list of signals. Signal attributes can be used for `url` and `data`."
      }
    },
    "outputs": {
      "default": {
        "description": "If the response body is json, then the body is output as a new signal. If the response body is a list of json, then a list is output with each json dict in the body acting as a new signal. If the response body is not json, then the raw text of the response is included in the outgoing signal as the value of the key `raw`."
      }
    },
    "commands": {}
  },
  "nio/HTTPRequestsPostSignal": {
    "version": "0.1.2",
    "description": "The HTTPRequestsPostSignal block is similar to the [HTTPRequests](https://blocks.n.io/HTTPRequests) block. One request is made for every signal input. The input signal will be used as the body of the post request.",
    "categories": [
      "Communication",
      "Web Data"
    ],
    "properties": {
      "basic_auth_creds": {
        "title": "Credentials (BasicAuth)",
        "type": "ObjectType",
        "description": "When making a request that needs Basic Authentication, enter the username and password.",
        "default": {
          "password": null,
          "username": null
        }
      },
      "enrich": {
        "title": "Signal Enrichment",
        "type": "ObjectType",
        "description": "If checked (true), the attributes of the incoming signal will be excluded from the outgoing signal. If unchecked (false), the attributes of the incoming signal will be included in the outgoing signal.",
        "default": {
          "exclude_existing": true,
          "enrich_field": ""
        }
      },
      "headers": {
        "title": "Headers",
        "type": "ListType",
        "description": "Create custom header content. Headers and values can be either simple strings or expression properties that use incoming signals.",
        "default": []
      },
      "http_method": {
        "title": "HTTP Method",
        "type": "SelectType",
        "description": "HTTP request method (e.g., GET|POST|PUT|DELETE).",
        "default": "post"
      },
      "require_json": {
        "title": "Require JSON Response",
        "type": "BoolType",
        "description": "If `True` and response is not json, log a warning and do not emit a signal. If `False` and response is not json, emit a signal with the format `{'raw': response.text}`.",
        "default": false
      },
      "retry_options": {
        "title": "Retry Options",
        "type": "ObjectType",
        "description": "How many times to retry to HTTP request",
        "default": {
          "max_retry": 5,
          "strategy": "linear",
          "indefinite": false,
          "multiplier": 1
        }
      },
      "timeout": {
        "title": "Request Timeout",
        "type": "IntType",
        "description": "Amount of time, in seconds, to wait for a response. If empty or 0, requests will never time out.",
        "default": 0
      },
      "url": {
        "title": "URL Target",
        "type": "Type",
        "description": "Target URL for the request.",
        "default": "http://127.0.0.1:8181"
      },
      "verify": {
        "title": "Verify Host's SSL Certificate",
        "type": "BoolType",
        "description": "A hidden property. For HTTPS, determines whether to check a host's SSL certificate. Default value for the block is `True`.",
        "default": true
      }
    },
    "inputs": {
      "default": {
        "description": "Any list of signals. Signal attributes can be used for `url` and `data`."
      }
    },
    "outputs": {
      "default": {
        "description": "If the response body is json, then the body is output as a new signal. If the response body is a list of json, then a list is output with each json dict in the body acting as a new signal. If the response body is not json, then the raw text of the response is included in the outgoing signal as the value of the key `raw`."
      }
    },
    "commands": {}
  }
}
